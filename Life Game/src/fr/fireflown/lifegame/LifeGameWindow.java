package fr.fireflown.lifegame;
import java.awt.*;
import java.awt.event.*;

import javax.swing.*;
import com.jgoodies.forms.factories.*;
import com.jgoodies.forms.layout.*;



/**
 * @author Donatien Rabiller
 */
@SuppressWarnings("serial")
public class LifeGameWindow extends JFrame {
	
	/**
	* Intern class that defines the MouseAdapter
	* The mouse adapter will catch the mouse click event
	* generated on the grid cells.
	* A click will turn on or off a cell via cellsButtonMousePressed function
	*/
	class myMouseAdapter extends MouseAdapter {
		private int i,j;
		
		public myMouseAdapter(int i, int j) {
			super ();
			this.i = i;
			this.j = j;
		}
		
		@Override
		public void mousePressed(MouseEvent e) {
			cellsButtonMousePressed(e,i,j);
		}
	}
	
	/**
	 * Intern class that define the Thread that
	 * handle the game logic and the screen refresh
	 */
	class myThread implements Runnable {
		myThread() {
			super();
		}
		
		public void run() {
			/**
			* Interupt is handle by the window button Stop
			* It enable the user to stop or continue the simulation
			*/
			while(!interupt) {
				m_game.computeStep();
				refreshDisplay();
				try {
					// We give the process some time to do other things
					Thread.sleep(100);
				} catch(InterruptedException e) {
					e.printStackTrace();
				}
			}
		}
	}

	// Default constuctor, generated by JForm
	public LifeGameWindow() {
		initComponents();
	}
	
	// Handle the click on the Exit button in the menu bar
	private void exitActionPerformed(ActionEvent e) {
		// TODO add your code here
		this.dispose();
	}
	
	// Handle the click on the Step button
	// Compute a step of the simulation and refresh the grid panel
	private void stepButtonActionPerformed(ActionEvent e) {
		// TODO add your code here
		m_game.computeStep();
		refreshDisplay();
	}
	
	// Handle the click on the Start button
	// Start the thread and make the simulation run at 1/10th step/seconds
	private void startButtonActionPerformed(ActionEvent e) {
		// TODO add your code here
		interupt = false;
		Thread t = new Thread(new myThread());
		t.start();
	}

	// Handle the click on the Stop button
	// Set interupt to true which stop the thread when it finished his work
	private void stopButtonActionPerformed(ActionEvent e) {
		// TODO add your code here
		interupt = true;
	}

	// Handle the click on the '+' button
	// Increase the size of a cell which produce a zoom in effect
	private void zoomInActionPerformed(ActionEvent e) {
		// We set the upper bound to 80 for CELL_SIZE
		if(CELL_SIZE<=60) {
			CELL_SIZE += 20;
			// Update the grid panel on its size
			gridPanel.setPreferredSize(new Dimension(m_game.getWidth()*CELL_SIZE, m_game.getHeight()*CELL_SIZE));
			// A call on revalidate force the redraw of the grid
			gridPanel.revalidate();
		} else if(CELL_SIZE == 10) { // The lower bound is 10
			CELL_SIZE += 10;
			gridPanel.setPreferredSize(new Dimension(m_game.getWidth()*CELL_SIZE, m_game.getHeight()*CELL_SIZE));
			gridPanel.revalidate();
		}
	}
	
	// Handle the click on the '-' button
	// Reduce the size of a cell which produce a zoom out effect
	private void zoomOutActionPerformed(ActionEvent e) {
		if(CELL_SIZE>20) {
			CELL_SIZE -= 20;
			gridPanel.setPreferredSize(new Dimension(m_game.getWidth()*CELL_SIZE, m_game.getHeight()*CELL_SIZE));
			gridPanel.revalidate();
		} else if (CELL_SIZE == 20) { // Lower bound is 10 so we check if we are at 20 and reduce 10
			CELL_SIZE -= 10;
			gridPanel.setPreferredSize(new Dimension(m_game.getWidth()*CELL_SIZE, m_game.getHeight()*CELL_SIZE));
			gridPanel.revalidate();
		}
		
		// If the value of CELL_SIZE is 10 we do nothing
	}
	
	// Handle the click on the Restart button in the menu bar
	private void restartActionPerformed(ActionEvent e) {
		// We save the game size before restart
		int r = m_game.getHeight(), c = m_game.getWidth();
		// Set m_game to null so the garbage collector will handle it
		m_game = null;
		// Setup a new game of height r and width c
		setupGrid(r, c);
		// Redraw the grid panel
		gridContainer.revalidate();
	}
	
	// Handle the click on the Random button
	// Randomize the cell state on the grid
	private void randomButtonActionPerformed(ActionEvent e) {
		// Call the game randomize function with a filling ratio of the ratio spinner value
		m_game.randomizeGrid((int)rndRatioSpinner.getValue());
		refreshDisplay();
	}

	private void initComponents() {		
		// JFormDesigner - Component initialization - DO NOT MODIFY  //GEN-BEGIN:initComponents
		// Generated using JFormDesigner Evaluation license - Donatien Rabiller
		buttonPanel = new JPanel();
		vSpacer1 = new JPanel(null);
		cycleLabel = new JLabel();
		panel2 = new JPanel();
		label1 = new JLabel();
		rndRatioSpinner = new JSpinner();
		randomButton = new JButton();
		panel1 = new JPanel();
		zoomIn = new JButton();
		zoomOut = new JButton();
		startButton = new JButton();
		stepButton = new JButton();
		stopButton = new JButton();
		menuBar = new JMenuBar();
		file = new JMenu();
		restart = new JMenuItem();
		exit = new JMenuItem();
		gridScrollPanel = new JScrollPane();
		gridContainer = new JPanel();
		gridPanel = new JPanel();

		//======== this ========
		setTitle("Life Game");
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
		Container contentPane = getContentPane();
		contentPane.setLayout(new BorderLayout());
		setVisible(true);

		//======== buttonPanel ========
		{
			buttonPanel.setPreferredSize(new Dimension(120, 370));

			// JFormDesigner evaluation mark
			buttonPanel.setBorder(new javax.swing.border.CompoundBorder(
				new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
					"JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
					javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
					java.awt.Color.red), buttonPanel.getBorder())); buttonPanel.addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});

			buttonPanel.setLayout(new FormLayout(
				"42dlu:grow",
				"7*(default, $lgap), fill:default, 2*($lgap, default)"));

			//---- vSpacer1 ----
			vSpacer1.setPreferredSize(new Dimension(10, 32767));
			buttonPanel.add(vSpacer1, CC.xy(1, 1));

			//---- cycleLabel ----
			cycleLabel.setText("Cycle :");
			buttonPanel.add(cycleLabel, CC.xy(1, 3));

			//======== panel2 ========
			{
				panel2.setLayout(new FlowLayout());

				//---- label1 ----
				label1.setText("Taux :");
				panel2.add(label1);

				//---- rndRatioSpinner ----
				rndRatioSpinner.setModel(new SpinnerNumberModel(20, 0, 100, 1));
				panel2.add(rndRatioSpinner);
			}
			buttonPanel.add(panel2, CC.xy(1, 5));

			//---- randomButton ----
			randomButton.setText("Randomize");
			randomButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					randomButtonActionPerformed(e);
				}
			});
			buttonPanel.add(randomButton, CC.xy(1, 7));

			//======== panel1 ========
			{
				panel1.setLayout(new FlowLayout());

				//---- zoomIn ----
				zoomIn.setText("+");
				zoomIn.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						zoomInActionPerformed(e);
					}
				});
				panel1.add(zoomIn);

				//---- zoomOut ----
				zoomOut.setText("-");
				zoomOut.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						zoomOutActionPerformed(e);
					}
				});
				panel1.add(zoomOut);
			}
			buttonPanel.add(panel1, CC.xy(1, 9));

			//---- startButton ----
			startButton.setText("Start");
			startButton.setPreferredSize(new Dimension(55, 25));
			startButton.setMnemonic('S');
			startButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					startButtonActionPerformed(e);
				}
			});
			buttonPanel.add(startButton, CC.xy(1, 15));

			//---- stepButton ----
			stepButton.setText("Step");
			stepButton.setPreferredSize(new Dimension(55, 25));
			stepButton.setMnemonic('T');
			stepButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					stepButtonActionPerformed(e);
				}
			});
			buttonPanel.add(stepButton, CC.xy(1, 17));

			//---- stopButton ----
			stopButton.setText("Stop");
			stopButton.setPreferredSize(new Dimension(55, 25));
			stopButton.setMnemonic('P');
			stopButton.addActionListener(new ActionListener() {
				@Override
				public void actionPerformed(ActionEvent e) {
					stopButtonActionPerformed(e);
				}
			});
			buttonPanel.add(stopButton, CC.xy(1, 19));
		}
		contentPane.add(buttonPanel, BorderLayout.EAST);

		//======== menuBar ========
		{

			//======== file ========
			{
				file.setText("File");
				file.setIcon(UIManager.getIcon("FileChooser.upFolderIcon"));

				//---- restart ----
				restart.setText("Restart");
				restart.setIcon(UIManager.getIcon("OptionPane.informationIcon"));
				restart.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						restartActionPerformed(e);
					}
				});
				file.add(restart);

				//---- exit ----
				exit.setText("Exit");
				exit.setIcon(UIManager.getIcon("OptionPane.errorIcon"));
				exit.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						exitActionPerformed(e);
					}
				});
				file.add(exit);
			}
			menuBar.add(file);
		}
		contentPane.add(menuBar, BorderLayout.NORTH);

		//======== gridScrollPanel ========
		{

			//======== gridContainer ========
			{
				gridContainer.setLayout(new FlowLayout(FlowLayout.LEFT));
				gridContainer.setBackground(Color.WHITE);

				//======== gridPanel ========
				{
					gridPanel.setPreferredSize(new Dimension(500, 600));
					gridPanel.setLayout(null);
					setupGrid(DEFAULT_GRIDHEIGHT, DEFAULT_GRIDWIDTH);
				}
				gridContainer.add(gridPanel);
			}
			gridScrollPanel.setViewportView(gridContainer);
		}
		contentPane.add(gridScrollPanel, BorderLayout.CENTER);
		pack();
		setLocationRelativeTo(getOwner());
		// JFormDesigner - End of component initialization  //GEN-END:initComponents
	}

	// JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables
	// Generated using JFormDesigner Evaluation license - Donatien Rabiller
	private JPanel buttonPanel;
	private JPanel vSpacer1;
	private JLabel cycleLabel;
	private JPanel panel2;
	private JLabel label1;
	private JSpinner rndRatioSpinner;
	private JButton randomButton;
	private JPanel panel1;
	private JButton zoomIn;
	private JButton zoomOut;
	private JButton startButton;
	private JButton stepButton;
	private JButton stopButton;
	private JMenuBar menuBar;
	private JMenu file;
	private JMenuItem restart;
	private JMenuItem exit;
	private JScrollPane gridScrollPanel;
	private JPanel gridContainer;
	private JPanel gridPanel;
	// JFormDesigner - End of variables declaration  //GEN-END:variables
	
	// Logical part of the Life Game
	private LifeGame m_game;
	
	// Used to interup the simulation
	private boolean interupt = false;
	
	// Default size of the grid
	final static private int DEFAULT_GRIDWIDTH = 100;
	final static private int DEFAULT_GRIDHEIGHT = 100;
	
	// Default size of a cell
	private int CELL_SIZE = 20;
	
	// Handle a click on the mouse
	private void cellsButtonMousePressed(MouseEvent e, int i, int j) {
		// If the game is running we stop it
		interupt = true;
		// Telling the game we click on a cell of coordinate i, j
		m_game.changeCellState(j, i);
		
		// Redraw the cell i, j
		refreshDisplay(i, j);		
	}
	
	// Setup a grid of specified row and collumn
	private void setupGrid(int row, int collumn) {
		// Setup the grid panel
		gridPanel.removeAll();
		gridPanel.setLayout(new GridLayout(row, collumn));
		gridPanel.setPreferredSize(new Dimension(450, 500));
		// Initializing the game with specified row and collumn
		if (m_game == null)
			m_game = new LifeGame(collumn, row);
		else
			// If the game is already instanced then we just update its size
			m_game.changeSize(row, collumn);
			
		// Creating the cells array that will represent the graphics side of the simulation
		JPanel[][] cells = new JPanel[m_game.getHeight()][m_game.getWidth()];
		gridPanel.setPreferredSize(new Dimension(m_game.getWidth()*CELL_SIZE, m_game.getHeight()*CELL_SIZE));
		
		for(int i=0 ; i<m_game.getHeight() ; i++)
		{
			for(int j=0 ; j<m_game.getWidth() ; j++)
			{
				// Inizializing each cells to WHITE and add them a Mouse Adapter with their coordinates
				cells[i][j] = new JPanel();
				cells[i][j].setBackground(Color.WHITE);
				cells[i][j].addMouseListener(new myMouseAdapter(i,j)); 
				cells[i][j].setPreferredSize(new Dimension(20, 20)); // Here we should use CELL_SIZE
				gridPanel.add(cells[i][j]);
			}
		}
		//gridPanel.revalidate(); 			Useless
		//gridScrollPanel.revalidate();
	}
	
	// Refresh the grid panel, color the grid to represent the state of each cells
1	private void refreshDisplay() {
		// We recover the state of the cell at a specifique moment in time
		// Because of the threading system it could be possible, if called outside the thread
		// To provoke a multi access exception. In this particular setup there is no problem.
		boolean[][] cellState = m_game.getCellState();
		
		// btw forgot to test the null state here, should be a good idea to add
		for(int i=0 ; i<m_game.getHeight() ; i++)
		{
			for(int j=0 ; j<m_game.getWidth() ; j++)
			{				
				// If the cell is alive (aka: cellState is true) then we color the cell in black
				if(cellState[i][j])
					gridPanel.getComponent(i*m_game.getWidth()+j).setBackground(Color.BLACK); 	// i*w+j return the n^th cell
				else // If the cell is dead (aka: cellState is false) then we color the cell in white
					gridPanel.getComponent(i*m_game.getWidth()+j).setBackground(Color.WHITE);
			}
		}
		
		// Update the label to tell the user how many cycle the simulation has run
		cycleLabel.setText("Cycle : "+m_game.getCycle());
	}
	
	// Refresh only a particular cell of the display
	// Used in the case of asynchronous event like mouse click
	private void refreshDisplay(int i, int j) {
		boolean[][] cellState = m_game.getCellState();
		if(cellState[i][j])
			gridPanel.getComponent(i*m_game.getWidth()+j).setBackground(Color.BLACK);
		else
			gridPanel.getComponent(i*m_game.getWidth()+j).setBackground(Color.WHITE);
	}
}
